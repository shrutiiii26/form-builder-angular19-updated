{"ast":null,"code":"import _asyncToGenerator from \"D:/form-builder-angular19-updated/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport Dexie from 'dexie';\nimport * as i0 from \"@angular/core\";\nexport let IndexedDBService = /*#__PURE__*/(() => {\n  class IndexedDBService extends Dexie {\n    getForms() {\n      throw new Error('Method not implemented.');\n    }\n    constructor() {\n      super('FormBuilderDB');\n      this.version(1).stores({\n        forms: 'id, name, version, createdAt, updatedAt',\n        submissions: 'id, formId, formVersion, createdAt',\n        audit: '++id, formId, action, at'\n      });\n      this.forms = this.table('forms');\n      this.submissions = this.table('submissions');\n      this.audit = this.table('audit');\n      this.initializeSeedData();\n    }\n    initializeSeedData() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const existingForms = yield _this.forms.count();\n          if (existingForms === 0) {\n            const response = yield fetch('/assets/seed-forms.json');\n            const seedForms = yield response.json();\n            yield _this.seedData(seedForms);\n          }\n        } catch (error) {\n          console.error('Failed to initialize seed data:', error);\n        }\n      })();\n    }\n    seedData(seedForms) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const existingForms = yield _this2.forms.count();\n        if (existingForms === 0) {\n          yield _this2.forms.bulkAdd(seedForms);\n          // Add audit log for seeding\n          yield _this2.audit.add({\n            formId: 'system',\n            action: 'seed',\n            payload: {\n              count: seedForms.length\n            },\n            at: new Date().toISOString()\n          });\n        }\n      })();\n    }\n    getAllForms() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        return yield _this3.forms.toArray();\n      })();\n    }\n    getFormById(id) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        return yield _this4.forms.get(id);\n      })();\n    }\n    saveForm(form) {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        yield _this5.forms.put(form);\n        yield _this5.audit.add({\n          formId: form.id,\n          action: 'update',\n          payload: form,\n          at: new Date().toISOString()\n        });\n        return form.id;\n      })();\n    }\n    createForm(form) {\n      var _this6 = this;\n      return _asyncToGenerator(function* () {\n        yield _this6.forms.add(form);\n        yield _this6.audit.add({\n          formId: form.id,\n          action: 'create',\n          payload: form,\n          at: new Date().toISOString()\n        });\n        return form.id;\n      })();\n    }\n    deleteForm(id) {\n      var _this7 = this;\n      return _asyncToGenerator(function* () {\n        yield _this7.forms.delete(id);\n        yield _this7.audit.add({\n          formId: id,\n          action: 'delete',\n          payload: {\n            id\n          },\n          at: new Date().toISOString()\n        });\n      })();\n    }\n    getSubmissions(formId) {\n      var _this8 = this;\n      return _asyncToGenerator(function* () {\n        return yield _this8.submissions.where('formId').equals(formId).toArray();\n      })();\n    }\n    getAllSubmissions() {\n      var _this9 = this;\n      return _asyncToGenerator(function* () {\n        return yield _this9.submissions.toArray();\n      })();\n    }\n    saveSubmission(submission) {\n      var _this0 = this;\n      return _asyncToGenerator(function* () {\n        yield _this0.submissions.add(submission);\n        yield _this0.audit.add({\n          formId: submission.formId,\n          action: 'submission',\n          payload: submission,\n          at: new Date().toISOString()\n        });\n        return submission.id;\n      })();\n    }\n    getAuditLogs(formId) {\n      var _this1 = this;\n      return _asyncToGenerator(function* () {\n        if (formId) {\n          return yield _this1.audit.where('formId').equals(formId).toArray();\n        }\n        return yield _this1.audit.toArray();\n      })();\n    }\n    resetData(seedForms) {\n      var _this10 = this;\n      return _asyncToGenerator(function* () {\n        yield _this10.forms.clear();\n        yield _this10.submissions.clear();\n        yield _this10.audit.clear();\n        yield _this10.seedData(seedForms);\n      })();\n    }\n    getFormVersions(formId) {\n      var _this11 = this;\n      return _asyncToGenerator(function* () {\n        return yield _this11.audit.where('formId').equals(formId).and(log => log.action === 'update' || log.action === 'create').toArray();\n      })();\n    }\n    static {\n      this.ɵfac = function IndexedDBService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || IndexedDBService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: IndexedDBService,\n        factory: IndexedDBService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return IndexedDBService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}