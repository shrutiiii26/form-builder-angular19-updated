{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let WorkerService = /*#__PURE__*/(() => {\n  class WorkerService {\n    constructor() {\n      this.worker = null;\n      if (typeof Worker !== 'undefined') {\n        this.worker = new Worker(new URL('../workers/expression.worker', import.meta.url), {\n          type: 'module'\n        });\n      }\n    }\n    evaluateCompute(expr, values) {\n      return new Promise(resolve => {\n        if (!this.worker) return resolve({\n          success: false,\n          error: 'No Worker'\n        });\n        const handler = ({\n          data\n        }) => {\n          resolve(data);\n          this.worker.removeEventListener('message', handler);\n        };\n        this.worker.addEventListener('message', handler);\n        this.worker.postMessage({\n          type: 'compute',\n          expr,\n          values\n        });\n      });\n    }\n    evaluateIf(ifExpr, values) {\n      return new Promise(resolve => {\n        if (!this.worker) return resolve({\n          success: false,\n          error: 'No Worker'\n        });\n        const handler = ({\n          data\n        }) => {\n          resolve(data);\n          this.worker.removeEventListener('message', handler);\n        };\n        this.worker.addEventListener('message', handler);\n        this.worker.postMessage({\n          type: 'evalIf',\n          ifExpr,\n          values\n        });\n      });\n    }\n    static {\n      this.ɵfac = function WorkerService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || WorkerService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: WorkerService,\n        factory: WorkerService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return WorkerService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}