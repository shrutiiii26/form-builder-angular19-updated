{"ast":null,"code":"import { from } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let WorkerService = /*#__PURE__*/(() => {\n  class WorkerService {\n    constructor() {\n      this.worker = new Worker(new URL('../../workers/expression.worker', import.meta.url));\n    }\n    evaluateExpression(expression, context) {\n      return from(new Promise((resolve, reject) => {\n        const messageId = Math.random().toString(36);\n        const handleMessage = event => {\n          if (event.data.id === messageId) {\n            this.worker.removeEventListener('message', handleMessage);\n            if (event.data.error) {\n              reject(new Error(event.data.error));\n            } else {\n              resolve(event.data.result);\n            }\n          }\n        };\n        this.worker.addEventListener('message', handleMessage);\n        this.worker.postMessage({\n          id: messageId,\n          expression,\n          context\n        });\n      }));\n    }\n    generateSubmissions(count, schema) {\n      return from(new Promise(resolve => {\n        // Simulate submission generation\n        setTimeout(() => {\n          const submissions = Array.from({\n            length: count\n          }, (_, i) => this.generateMockSubmission(schema, i));\n          resolve(submissions);\n        }, 100);\n      }));\n    }\n    generateMockSubmission(schema, index) {\n      const data = {};\n      schema.pages.forEach(page => {\n        page.elements.forEach(element => {\n          switch (element.type) {\n            case 'text':\n              data[element.id] = `User ${index}`;\n              break;\n            case 'number':\n              data[element.id] = Math.floor(Math.random() * 100);\n              break;\n            case 'select':\n              data[element.id] = element.options?.[0] || 'option1';\n              break;\n            case 'checkbox':\n              data[element.id] = Math.random() > 0.5;\n              break;\n            default:\n              data[element.id] = `value${index}`;\n          }\n        });\n      });\n      return data;\n    }\n    static {\n      this.ɵfac = function WorkerService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || WorkerService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: WorkerService,\n        factory: WorkerService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return WorkerService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}