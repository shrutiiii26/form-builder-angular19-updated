{"ast":null,"code":"import _asyncToGenerator from \"D:/form-builder-angular19-updated/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ActivatedRoute } from '@angular/router';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { WorkerService } from '../core/services/worker.service';\nimport { IndexedDBService } from '../core/services/indexeddb.service';\nimport { Subject, takeUntil } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../core/services/indexeddb.service\";\nimport * as i3 from \"../core/services/worker.service\";\nexport let RuntimeComponent = /*#__PURE__*/(() => {\n  class RuntimeComponent {\n    constructor(route, db, worker) {\n      this.route = route;\n      this.db = db;\n      this.worker = worker;\n      this.fg = new FormGroup({});\n      this.currentPageIndex = 0;\n      this.hiddenFields = {};\n      this.destroy$ = new Subject();\n    }\n    ngOnInit() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const id = _this.route.snapshot.paramMap.get('id') || 'form-1';\n        yield _this.loadForm(id);\n      })();\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    loadForm(id) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const forms = yield _this2.db.getAllForms();\n        _this2.formSchema = forms.find(f => f.id === id);\n        if (!_this2.formSchema && forms.length > 0) {\n          _this2.formSchema = forms[0];\n        }\n        if (_this2.formSchema) {\n          _this2.buildForm();\n          _this2.setupRulesAndComputed();\n        }\n      })();\n    }\n    buildForm() {\n      const controls = {};\n      // Build controls for all pages\n      this.formSchema.schema.pages.forEach(page => {\n        page.elements.forEach(el => {\n          const validators = this.getValidators(el);\n          const defaultValue = this.getDefaultValue(el);\n          controls[el.id] = new FormControl({\n            value: defaultValue,\n            disabled: el.disabled\n          }, validators);\n        });\n      });\n      this.fg = new FormGroup(controls);\n    }\n    getValidators(element) {\n      const validators = [];\n      if (element.required) {\n        validators.push(Validators.required);\n      }\n      if (element.validators) {\n        if (element.validators.minLength) {\n          validators.push(Validators.minLength(element.validators.minLength));\n        }\n        if (element.validators.maxLength) {\n          validators.push(Validators.maxLength(element.validators.maxLength));\n        }\n        if (element.validators.min !== undefined) {\n          validators.push(Validators.min(element.validators.min));\n        }\n        if (element.validators.max !== undefined) {\n          validators.push(Validators.max(element.validators.max));\n        }\n        if (element.validators.pattern) {\n          validators.push(Validators.pattern(element.validators.pattern));\n        }\n      }\n      return validators;\n    }\n    getDefaultValue(element) {\n      if (element.type === 'checkbox') {\n        return false;\n      }\n      if (element.type === 'number') {\n        return null;\n      }\n      return element.default || '';\n    }\n    setupRulesAndComputed() {\n      this.fg.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(values => {\n        this.evaluateRules(values);\n        this.evaluateComputed(values);\n      });\n      // Initial evaluation\n      this.evaluateRules(this.fg.value);\n      this.evaluateComputed(this.fg.value);\n    }\n    evaluateRules(values) {\n      if (!this.formSchema.schema.rules || this.formSchema.schema.rules.length === 0) {\n        return;\n      }\n      this.formSchema.schema.rules.forEach(rule => {\n        try {\n          // Evaluate condition\n          let condition = rule.if;\n          // Replace field references with actual values\n          Object.keys(values).forEach(key => {\n            const value = values[key];\n            const regex = new RegExp(`\\\\b${key}\\\\b`, 'g');\n            const replacement = typeof value === 'string' ? `'${value}'` : String(value);\n            condition = condition.replace(regex, replacement);\n          });\n          // Evaluate the condition\n          const result = this.safeEvaluate(condition);\n          // Apply actions\n          if (rule.then && Array.isArray(rule.then)) {\n            rule.then.forEach(action => {\n              this.applyAction(action, result);\n            });\n          }\n        } catch (error) {\n          console.error('Error evaluating rule:', rule, error);\n        }\n      });\n    }\n    safeEvaluate(expression) {\n      try {\n        return Boolean(Function(`'use strict'; return (${expression})`)());\n      } catch {\n        return false;\n      }\n    }\n    applyAction(action, conditionResult) {\n      const control = this.fg.get(action.target);\n      if (!control) return;\n      switch (action.action) {\n        case 'show':\n          this.hiddenFields[action.target] = !conditionResult;\n          break;\n        case 'hide':\n          this.hiddenFields[action.target] = conditionResult;\n          break;\n        case 'enable':\n          if (conditionResult) {\n            control.enable();\n          }\n          break;\n        case 'disable':\n          if (conditionResult) {\n            control.disable();\n          }\n          break;\n        case 'setValue':\n          if (conditionResult && action.value !== undefined) {\n            control.setValue(action.value, {\n              emitEvent: false\n            });\n          }\n          break;\n      }\n    }\n    evaluateComputed(values) {\n      if (!this.formSchema.schema.computed || this.formSchema.schema.computed.length === 0) {\n        return;\n      }\n      this.formSchema.schema.computed.forEach(computed => {\n        try {\n          let expression = computed.expr;\n          // Replace field references with actual values\n          Object.keys(values).forEach(key => {\n            const value = values[key] || 0;\n            const regex = new RegExp(`\\\\b${key}\\\\b`, 'g');\n            expression = expression.replace(regex, String(value));\n          });\n          // Evaluate the expression\n          const result = this.safeEvaluateExpression(expression);\n          // Set the computed value\n          const control = this.fg.get(computed.target);\n          if (control) {\n            control.setValue(result, {\n              emitEvent: false\n            });\n          }\n        } catch (error) {\n          console.error('Error evaluating computed field:', computed, error);\n        }\n      });\n    }\n    safeEvaluateExpression(expression) {\n      try {\n        return Function(`'use strict'; return (${expression})`)();\n      } catch {\n        return null;\n      }\n    }\n    nextPage() {\n      if (this.currentPageIndex < this.formSchema.schema.pages.length - 1) {\n        this.currentPageIndex++;\n        window.scrollTo({\n          top: 0,\n          behavior: 'smooth'\n        });\n      }\n    }\n    previousPage() {\n      if (this.currentPageIndex > 0) {\n        this.currentPageIndex--;\n        window.scrollTo({\n          top: 0,\n          behavior: 'smooth'\n        });\n      }\n    }\n    saveDraft() {\n      localStorage.setItem(`form-draft-${this.formSchema.id}`, JSON.stringify({\n        values: this.fg.value,\n        pageIndex: this.currentPageIndex,\n        savedAt: new Date().toISOString()\n      }));\n      alert('Draft saved locally!');\n    }\n    loadDraft() {\n      const draftKey = `form-draft-${this.formSchema.id}`;\n      const draft = localStorage.getItem(draftKey);\n      if (draft) {\n        try {\n          const {\n            values,\n            pageIndex\n          } = JSON.parse(draft);\n          this.fg.patchValue(values);\n          this.currentPageIndex = pageIndex || 0;\n        } catch (error) {\n          console.error('Error loading draft:', error);\n        }\n      }\n    }\n    submit() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        if (_this3.fg.invalid) {\n          _this3.markAllAsTouched();\n          alert('Please fill in all required fields correctly.');\n          return;\n        }\n        const submission = {\n          id: 's-' + Date.now(),\n          formId: _this3.formSchema.id,\n          formVersion: _this3.formSchema.version,\n          data: _this3.fg.value,\n          createdAt: new Date().toISOString()\n        };\n        try {\n          yield _this3.db.saveSubmission(submission);\n          // Clear draft\n          localStorage.removeItem(`form-draft-${_this3.formSchema.id}`);\n          alert('Form submitted successfully! Submission ID: ' + submission.id);\n          // Reset form\n          _this3.fg.reset();\n          _this3.currentPageIndex = 0;\n        } catch (error) {\n          console.error('Error submitting form:', error);\n          alert('Error submitting form. Please try again.');\n        }\n      })();\n    }\n    markAllAsTouched() {\n      Object.keys(this.fg.controls).forEach(key => {\n        this.fg.get(key)?.markAsTouched();\n      });\n    }\n    onFileChange(event, fieldId) {\n      const file = event.target.files[0];\n      if (file) {\n        // For this demo, store file name only\n        // In production, you'd handle file upload properly\n        const control = this.fg.get(fieldId);\n        if (control) {\n          control.setValue(file.name);\n        }\n      }\n    }\n    static {\n      this.ɵfac = function RuntimeComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || RuntimeComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.IndexedDBService), i0.ɵɵdirectiveInject(i3.WorkerService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: RuntimeComponent,\n        selectors: [[\"app-runtime\"]],\n        decls: 0,\n        vars: 0,\n        template: function RuntimeComponent_Template(rf, ctx) {},\n        styles: [\"@charset \\\"UTF-8\\\";.runtime-container[_ngcontent-%COMP%]{min-height:100vh;background:#f5f7fa;padding-bottom:2rem}.runtime-header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;padding:1.5rem 2rem;background:#fff;border-bottom:1px solid #e1e4e8;box-shadow:0 2px 4px #0000000d;margin-bottom:2rem}.runtime-header[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{margin:0;color:#2c3e50;font-size:1.75rem;font-weight:600}.header-actions[_ngcontent-%COMP%]{display:flex;gap:.75rem}.runtime-content[_ngcontent-%COMP%]{max-width:900px;margin:0 auto;padding:0 1.5rem}.progress-indicator[_ngcontent-%COMP%]{background:#fff;border-radius:8px;padding:2rem;margin-bottom:2rem;box-shadow:0 2px 8px #00000014}.progress-steps[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;margin-bottom:1.5rem;position:relative}.progress-steps[_ngcontent-%COMP%]:before{content:\\\"\\\";position:absolute;top:20px;left:0;right:0;height:2px;background:#e9ecef;z-index:0}.progress-step[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;gap:.5rem;position:relative;z-index:1;flex:1}.step-circle[_ngcontent-%COMP%]{width:40px;height:40px;border-radius:50%;background:#e9ecef;color:#6c757d;display:flex;align-items:center;justify-content:center;font-weight:600;font-size:1rem;transition:all .3s ease}.progress-step.active[_ngcontent-%COMP%]   .step-circle[_ngcontent-%COMP%]{background:#4a90e2;color:#fff;box-shadow:0 0 0 4px #4a90e233}.progress-step.completed[_ngcontent-%COMP%]   .step-circle[_ngcontent-%COMP%]{background:#28a745;color:#fff}.step-label[_ngcontent-%COMP%]{font-size:.875rem;color:#495057;font-weight:500;text-align:center}.progress-step.active[_ngcontent-%COMP%]   .step-label[_ngcontent-%COMP%]{color:#4a90e2;font-weight:600}.progress-bar[_ngcontent-%COMP%]{width:100%;height:8px;background:#e9ecef;border-radius:4px;overflow:hidden}.progress-fill[_ngcontent-%COMP%]{height:100%;background:linear-gradient(90deg,#4a90e2,#28a745);transition:width .3s ease;border-radius:4px}.runtime-form[_ngcontent-%COMP%]{background:#fff;border-radius:8px;padding:2rem;box-shadow:0 2px 8px #00000014}.form-page[_ngcontent-%COMP%]{animation:_ngcontent-%COMP%_fadeIn .3s ease}@keyframes _ngcontent-%COMP%_fadeIn{0%{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}.page-title[_ngcontent-%COMP%]{margin:0 0 2rem;color:#2c3e50;font-size:1.5rem;font-weight:600;padding-bottom:1rem;border-bottom:2px solid #e9ecef}.form-fields[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:1.5rem;margin-bottom:2rem}.form-field[_ngcontent-%COMP%]{transition:all .3s ease}.form-field.hidden[_ngcontent-%COMP%]{display:none}.field-wrapper[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:.5rem}.field-label[_ngcontent-%COMP%]{font-weight:600;color:#495057;font-size:.9rem;display:block}.required[_ngcontent-%COMP%]{color:#dc3545;margin-left:.25rem;font-weight:700}.form-control[_ngcontent-%COMP%]{padding:.75rem 1rem;border:2px solid #ced4da;border-radius:6px;font-size:1rem;font-family:inherit;transition:all .2s ease;background:#fff}.form-control[_ngcontent-%COMP%]:focus{outline:none;border-color:#4a90e2;box-shadow:0 0 0 3px #4a90e21a}.form-control[_ngcontent-%COMP%]:disabled{background:#f8f9fa;cursor:not-allowed;color:#6c757d}.form-control.ng-invalid.ng-touched[_ngcontent-%COMP%]{border-color:#dc3545}.form-control.ng-valid.ng-touched[_ngcontent-%COMP%]{border-color:#28a745}select.form-control[_ngcontent-%COMP%]{cursor:pointer;appearance:none;background-image:url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='%23495057' d='M6 9L1 4h10z'/%3E%3C/svg%3E\\\");background-repeat:no-repeat;background-position:right 1rem center;padding-right:2.5rem}textarea.form-control[_ngcontent-%COMP%]{resize:vertical;min-height:100px;line-height:1.5}.radio-group[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:.75rem;padding:.5rem 0}.radio-label[_ngcontent-%COMP%], .checkbox-label[_ngcontent-%COMP%]{display:flex;align-items:center;gap:.75rem;cursor:pointer;padding:.5rem;border-radius:4px;transition:background .2s ease}.radio-label[_ngcontent-%COMP%]:hover, .checkbox-label[_ngcontent-%COMP%]:hover{background:#f8f9fa}.radio-label[_ngcontent-%COMP%]   input[type=radio][_ngcontent-%COMP%], .checkbox-label[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]{width:18px;height:18px;cursor:pointer;accent-color:#4a90e2}.radio-label[_ngcontent-%COMP%]   span[_ngcontent-%COMP%], .checkbox-label[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{font-weight:400;color:#495057}fieldset[_ngcontent-%COMP%]{border:none;padding:0;margin:0}legend.field-label[_ngcontent-%COMP%]{padding:0;margin-bottom:.75rem}.error-message[_ngcontent-%COMP%]{color:#dc3545;font-size:.875rem;margin-top:.25rem;display:flex;flex-direction:column;gap:.25rem;animation:_ngcontent-%COMP%_shake .3s ease}@keyframes _ngcontent-%COMP%_shake{0%,to{transform:translate(0)}25%{transform:translate(-5px)}75%{transform:translate(5px)}}.error-message[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{display:flex;align-items:center;gap:.5rem}.error-message[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:before{content:\\\"\\\\26a0\\\";font-size:1rem}.form-navigation[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;gap:1rem;padding-top:2rem;border-top:2px solid #e9ecef}.btn[_ngcontent-%COMP%]{padding:.75rem 1.5rem;border:none;border-radius:6px;font-size:1rem;font-weight:600;cursor:pointer;transition:all .2s ease;font-family:inherit;display:inline-flex;align-items:center;gap:.5rem}.btn[_ngcontent-%COMP%]:focus{outline:2px solid currentColor;outline-offset:2px}.btn[_ngcontent-%COMP%]:disabled{opacity:.5;cursor:not-allowed;transform:none!important}.btn-primary[_ngcontent-%COMP%]{background:#4a90e2;color:#fff}.btn-primary[_ngcontent-%COMP%]:hover:not(:disabled){background:#357abd;transform:translateY(-2px);box-shadow:0 4px 12px #4a90e24d}.btn-secondary[_ngcontent-%COMP%]{background:#6c757d;color:#fff}.btn-secondary[_ngcontent-%COMP%]:hover:not(:disabled){background:#5a6268;transform:translateY(-2px);box-shadow:0 4px 12px #6c757d4d}.btn-success[_ngcontent-%COMP%]{background:#28a745;color:#fff}.btn-success[_ngcontent-%COMP%]:hover:not(:disabled){background:#218838;transform:translateY(-2px);box-shadow:0 4px 12px #28a7454d}.btn-info[_ngcontent-%COMP%]{background:#17a2b8;color:#fff}.btn-info[_ngcontent-%COMP%]:hover:not(:disabled){background:#138496;transform:translateY(-2px);box-shadow:0 4px 12px #17a2b84d}.no-form[_ngcontent-%COMP%]{text-align:center;padding:4rem 2rem;background:#fff;border-radius:8px;box-shadow:0 2px 8px #00000014}.no-form[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:0;color:#6c757d;font-size:1.125rem}@media (max-width: 768px){.runtime-header[_ngcontent-%COMP%]{flex-direction:column;gap:1rem;text-align:center}.header-actions[_ngcontent-%COMP%]{width:100%;justify-content:center}.runtime-content[_ngcontent-%COMP%]{padding:0 1rem}.runtime-form[_ngcontent-%COMP%]{padding:1.5rem}.progress-steps[_ngcontent-%COMP%]{flex-wrap:wrap}.progress-step[_ngcontent-%COMP%]{min-width:80px}.step-label[_ngcontent-%COMP%]{font-size:.75rem}.form-navigation[_ngcontent-%COMP%]{flex-direction:column}.form-navigation[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]{width:100%;justify-content:center}}@media (max-width: 480px){.runtime-header[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%], .page-title[_ngcontent-%COMP%]{font-size:1.25rem}.btn[_ngcontent-%COMP%]{padding:.625rem 1.25rem;font-size:.9rem}}*[_ngcontent-%COMP%]:focus-visible{outline:2px solid #4a90e2;outline-offset:2px}[_ngcontent-%COMP%]::-webkit-scrollbar{width:8px;height:8px}[_ngcontent-%COMP%]::-webkit-scrollbar-track{background:#f1f3f5;border-radius:4px}[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{background:#adb5bd;border-radius:4px}[_ngcontent-%COMP%]::-webkit-scrollbar-thumb:hover{background:#868e96}\"]\n      });\n    }\n  }\n  return RuntimeComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}